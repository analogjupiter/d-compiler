#!/usr/bin/env bash

set -euo pipefail

USE_PARALLEL=true

while getopts ":s" opt; do
    case "${opt}" in
        s)
            USE_PARALLEL=false
            ;;
		\?)
			echo "Unknown argument" >&2
			exit 1
			;;
		*)
			echo "An unhandled getopts error occured."
			exit 1
    esac
done

if [ "$USE_PARALLEL" = true ] && ! command -v parallel &>/dev/null; then
	echo -e "Error:\tCannot locate 'parallel'."
	echo -e "      \tPass -s to fall back to slow batch processing instead."
	echo -e "      \t\t${0} -s"
	exit 1
fi

SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
cd "$SCRIPTDIR"

ROOTDIR=$(git rev-parse --show-toplevel)
cd "$ROOTDIR"

FILES=$(git diff --name-only "$(git merge-base master HEAD^)" | grep -e "\.d$" || true)
TOTAL=$(echo "${FILES}" | wc -w)

if [[ "$TOTAL" == 0 ]]; then
	echo "No files to format."
	exit 0
fi

echo Building sdfmt...
make -j bin/sdfmt

COUNTER=0
process_file() {
	FILE=$1
	echo "Formatting ${FILE}"

	bin/sdfmt -i "$FILE"

	if [[ -t 1 ]]; then
		printf "%u/%u\r" $(( ++COUNTER )) "$TOTAL"
	fi
}
export -f process_file

if [ "$USE_PARALLEL" = true ]; then
	parallel process_file ::: "$FILES"
else
	echo "Using non-parallel batch processing mode."
	for fn in $FILES; do process_file "$fn"; done
fi
